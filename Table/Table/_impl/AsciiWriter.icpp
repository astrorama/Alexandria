/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment    
 *  
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation; either version 3.0 of the License, or (at your option)  
 * any later version.  
 *  
 * This library is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more  
 * details.  
 *  
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  
 */

/* 
 * @file AsciiWriter.icpp
 * @author nikoapos
 */

namespace Euclid {
namespace Table {
  
struct AsciiWriter::StreamHolder {
  virtual ~StreamHolder() = default;
  virtual std::ostream& getStream() = 0;
};

namespace AsciiWriter_Impl {
  
template <typename StreamType>
struct StreamHolderImpl : public AsciiWriter::StreamHolder {
  template <typename... Args>
  StreamHolderImpl(Args&&... args) : m_stream(std::forward<Args>(args)...) {
  }
  std::ostream& getStream() override {
    return m_stream;
  }
  StreamType m_stream;
};

}

template <typename StreamType, typename... Args>
AsciiWriter AsciiWriter::create(Args&&... args) {
  return AsciiWriter(std::unique_ptr<StreamHolder>{
    new AsciiWriter_Impl::StreamHolderImpl<StreamType>(std::forward<Args>(args)...)
  });
}

} // namespace Table
} // namespace Euclid
