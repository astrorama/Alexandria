/*
 * Copyright (C) 2012-2021 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#include <cerrno>
#include <mach/mach_init.h>
#include <mach/mach_traps.h>
#include <mach/semaphore.h>
#include <mach/task.h>
#include <system_error>

namespace Euclid {
class Semaphore::SemaphoreImpl {
public:
  explicit SemaphoreImpl(unsigned int i) {
    auto ret = semaphore_create(mach_task_self(), &m_semaphore, SYNC_POLICY_FIFO, i);
    if (ret != KERN_SUCCESS) {
      throw std::system_error(errno, std::system_category());
    }
  }

  ~SemaphoreImpl() {
    semaphore_destroy(mach_task_self(), m_semaphore);
  }

  void post() {
    if (semaphore_signal(m_semaphore) != KERN_SUCCESS) {
      throw std::system_error(EINVAL, std::system_category());
    }
  }

  void wait() {
    for (;;) {
      auto ret = semaphore_wait(m_semaphore);
      if (ret == KERN_SUCCESS) {
        return;
      }
      if (ret == KERN_ABORTED) {
        continue;
      }
      throw std::system_error(EINVAL, std::system_category());
    }
  }

  bool try_acquire() {
    const mach_timespec_t wait{0, 0};
    return timed_wait(wait);
  }

  bool try_acquire_until(std::chrono::system_clock::time_point abs_time) {
    using std::chrono::duration_cast;

    auto now  = std::chrono::system_clock::now();
    auto left = abs_time - now;

    auto seconds  = duration_cast<std::chrono::seconds>(left);
    auto nseconds = duration_cast<std::chrono::nanoseconds>(left) - duration_cast<std::chrono::nanoseconds>(seconds);

    const mach_timespec_t wait{static_cast<unsigned int>(seconds.count()), static_cast<int>(nseconds.count())};
    return timed_wait(wait);
  }

private:
  semaphore_t m_semaphore;

  bool timed_wait(const mach_timespec_t& wait) {
    auto ret = semaphore_timedwait(m_semaphore, wait);
    if (ret == KERN_SUCCESS) {
      return true;
    }
    if (ret == KERN_OPERATION_TIMED_OUT) {
      return false;
    }
    throw std::system_error(EINVAL, std::system_category());
  }
};
}  // namespace Euclid
