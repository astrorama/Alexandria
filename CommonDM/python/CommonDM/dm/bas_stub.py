# /home/nikoapos/ISDC/Projects/Alexandria/2.0/CommonDM/python/CommonDM/dm/bas_stub.py
# PyXB bindings for NamespaceModule
# NSM:d7a68900f0ce7cde88e1d02169e658b5d2174c35
# Generated 2014-06-12 14:36:51.812523 by PyXB version 1.1.2
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:399d4060-f22e-11e3-acaf-c4d98710dc86')

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

Namespace = pyxb.namespace.NamespaceForURI(u'http://euclid.esa.org/schema/bas', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
#ModuleRecord = Namespace.lookupModuleRecordByUID(_GenerationUID, create_if_missing=True)
#ModuleRecord._setModule(sys.modules[__name__])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a Python instance."""
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=Namespace.fallbackNamespace(), location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, _fallback_namespace=default_namespace)


# Atomic SimpleTypeDefinition
class objectId (pyxb.binding.datatypes.unsignedLong):

    """ 64 bits integers. It stores the primary key of
                any object inside Euclid data system: - 2 bytes for data centre
                identifier that produces the data, - 6 bytes for the object_id
                itself generated by the corresponding data centre.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'objectId')
    _Documentation = u' 64 bits integers. It stores the primary key of\n                any object inside Euclid data system: - 2 bytes for data centre\n                identifier that produces the data, - 6 bytes for the object_id\n                itself generated by the corresponding data centre.\n            '
objectId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'objectId', objectId)

# Atomic SimpleTypeDefinition
class extObjectId (pyxb.binding.datatypes.string):

    """ Simple string object identifier for external data.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'extObjectId')
    _Documentation = u' Simple string object identifier for external data.\n            '
extObjectId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'extObjectId', extObjectId)

# Atomic SimpleTypeDefinition
class objectName (pyxb.binding.datatypes.string):

    """Naming convention for object names: length between
                10 and 100, white spaces collapsed"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'objectName')
    _Documentation = u'Naming convention for object names: length between\n                10 and 100, white spaces collapsed'
objectName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(10L))
objectName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100L))
objectName._InitializeFacetMap(objectName._CF_minLength,
   objectName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', u'objectName', objectName)
