/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifdef PHOTOMETRY_IMPL

//-----------------------------------------------------------------------------
// Implementation of the iterator

template <bool Const>
Photometry::PhotometryIterator<Const>::PhotometryIterator(const filters_iter_t& filters_iter, const values_iter_t& values_iter)
    : m_filters_iter{filters_iter}, m_values_iter{values_iter} {}

template <bool Const>
Photometry::PhotometryIterator<Const>::PhotometryIterator(const PhotometryIterator<false>& other)
    : m_filters_iter{other.m_filters_iter}, m_values_iter{other.m_values_iter} {}

template <bool Const>
Photometry::PhotometryIterator<Const>& Photometry::PhotometryIterator<Const>::operator++() {
  ++m_filters_iter;
  ++m_values_iter;
  return *this;
}

template <bool Const>
bool Photometry::PhotometryIterator<Const>::operator==(const PhotometryIterator& other) const {
  return m_filters_iter == other.m_filters_iter;
}

template <bool Const>
bool Photometry::PhotometryIterator<Const>::operator!=(const PhotometryIterator& other) const {
  return m_filters_iter != other.m_filters_iter;
}

template <bool Const>
auto Photometry::PhotometryIterator<Const>::operator*() -> reference {
  return *m_values_iter;
}

template <bool Const>
auto Photometry::PhotometryIterator<Const>::operator->() -> pointer {
  return m_values_iter.operator->();
}

template <bool Const>
ssize_t Photometry::PhotometryIterator<Const>::operator-(const PhotometryIterator& other) const {
  return m_values_iter - other.m_values_iter;
}

template <bool Const>
const std::string& Photometry::PhotometryIterator<Const>::filterName() const {
  return *m_filters_iter;
}

#endif
