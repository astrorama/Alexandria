/**
 * @file GridContainer/_impl/GridContainer.icpp
 * @date May 13, 2014
 * @author Nikolaos Apostolakos
 */

#include "ElementsKernel/Exception.h"
#include "GridConstructionHelper.h"

namespace Euclid {
namespace GridContainer {

template<typename GridCellManager, typename... AxesTypes>
GridContainer<GridCellManager, AxesTypes...>::GridContainer(GridAxis<AxesTypes>... axes)
      : m_axes{std::move(axes)...} { }

template<typename GridCellManager, typename... AxesTypes>
GridContainer<GridCellManager, AxesTypes...>::GridContainer(std::tuple<GridAxis<AxesTypes>...> axes_tuple)
      : m_axes{std::move(axes_tuple)} { }

template<typename... AxesTypes>
std::tuple<GridAxis<AxesTypes>...> fixAxis(const std::tuple<GridAxis<AxesTypes>...>& original, size_t axis, size_t index) {
  std::tuple<GridAxis<AxesTypes>...> result {original};
    GridConstructionHelper<AxesTypes...>::template findAndFixAxis(result, axis, index, TemplateLoopCounter<0>{});
  return result;
}

template<typename GridCellManager, typename... AxesTypes>
GridContainer<GridCellManager, AxesTypes...>::GridContainer(
                      const GridContainer<GridCellManager, AxesTypes...>& other,
                      size_t axis, size_t index)
      : m_axes{other.m_axes}, m_axes_fixed{fixAxis(other.m_axes_fixed, axis, index)},
        m_fixed_indices{other.m_fixed_indices}, m_cell_manager{other.m_cell_manager} {
  // Update the fixed indices
  if (m_fixed_indices.find(axis) != m_fixed_indices.end()) {
    throw Elements::Exception() << "Axis " << axis << " is already fixed";
  }
  m_fixed_indices[axis] = index;
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
auto GridContainer<GridCellManager, AxesTypes...>::getOriginalAxis() const -> const GridAxis<axis_type<I>>& {
    return std::get<I>(m_axes);
}

template<typename GridCellManager, typename... AxesTypes>
size_t GridContainer<GridCellManager, AxesTypes...>::axisNumber() const {
  return std::tuple_size<decltype(m_axes_fixed)>::value;
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
auto GridContainer<GridCellManager, AxesTypes...>::getAxis() const -> const GridAxis<axis_type<I>>& {
    return std::get<I>(m_axes_fixed);
}

template<typename GridCellManager, typename... AxesTypes>
const std::tuple<GridAxis<AxesTypes>...>& GridContainer<GridCellManager, AxesTypes...>::getAxesTuple() const {
  return m_axes_fixed;
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::begin() -> iterator {
  iterator result {*this, GridCellManagerTraits<GridCellManager>::begin(*m_cell_manager)};
  GridConstructionHelper<AxesTypes...>::fixIteratorAxes(result, m_fixed_indices, TemplateLoopCounter<0>{});
  return result;
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::begin() const -> const_iterator {
  const_iterator result {*this, GridCellManagerTraits<GridCellManager>::begin(*m_cell_manager)};
  GridConstructionHelper<AxesTypes...>::fixIteratorAxes(result, m_fixed_indices, TemplateLoopCounter<0>{});
  return result;
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::cbegin() -> const_iterator {
  const_iterator result {*this, GridCellManagerTraits<GridCellManager>::begin(*m_cell_manager)};
  GridConstructionHelper<AxesTypes...>::fixIteratorAxes(result, m_fixed_indices, TemplateLoopCounter<0>{});
  return result;
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::end() -> iterator {
  return iterator{*this, GridCellManagerTraits<GridCellManager>::end(*m_cell_manager)};
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::end() const -> const_iterator {
  return const_iterator{*this, GridCellManagerTraits<GridCellManager>::end(*m_cell_manager)};
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::cend() -> const_iterator {
  return const_iterator{*this, GridCellManagerTraits<GridCellManager>::end(*m_cell_manager)};
}

template<typename GridCellManager, typename... AxesTypes>
size_t GridContainer<GridCellManager, AxesTypes...>::size() const {
  return m_index_helper_fixed.m_axes_index_factors.back();
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::operator()(decltype(std::declval<GridAxis<AxesTypes>>().size())... indices) const -> const cell_type& {
  size_t total_index = m_index_helper.totalIndex(indices...);
  return (*m_cell_manager)[total_index];
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::operator()(decltype(std::declval<GridAxis<AxesTypes>>().size())... indices) -> cell_type& {
  return const_cast<cell_type&>(static_cast<const GridContainer&>(*this)(indices...));
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::at(decltype(std::declval<GridAxis<AxesTypes>>().size())... indices) const -> const cell_type& {
  size_t total_index = m_index_helper.totalIndexChecked(indices...);
  return (*m_cell_manager)[total_index];
}

template<typename GridCellManager, typename... AxesTypes>
auto GridContainer<GridCellManager, AxesTypes...>::at(decltype(std::declval<GridAxis<AxesTypes>>().size())... indices) -> cell_type& {
  return const_cast<cell_type&>(static_cast<const GridContainer&>(*this).at(indices...));
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
GridContainer<GridCellManager, AxesTypes...>  GridContainer<GridCellManager, AxesTypes...>::fixAxisByIndex(size_t index) {
  if (index >= getOriginalAxis<I>().size()) {
    throw Elements::Exception() << "Index (" << index << ") out of axis " 
                              << getOriginalAxis<I>().name() << " size ("
                              << getOriginalAxis<I>().size() << ")";
  }
  return GridContainer<GridCellManager, AxesTypes...>(*this, I, index);
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
const GridContainer<GridCellManager, AxesTypes...> GridContainer<GridCellManager, AxesTypes...>::fixAxisByIndex(size_t index) const {
  return const_cast<GridContainer<GridCellManager, AxesTypes...>*>(this)->fixAxisByIndex<I>(index);
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
GridContainer<GridCellManager, AxesTypes...>  GridContainer<GridCellManager, AxesTypes...>::fixAxisByValue(const axis_type<I>& value) {
  auto axis = getOriginalAxis<I>();
  auto iter = std::find(axis.begin(), axis.end(), value);
  if (iter == axis.end()) {
    throw Elements::Exception() << "Failed to fix axis " << getOriginalAxis<I>().name()
                              << " (given value not found)";
  }
  return GridContainer<GridCellManager, AxesTypes...>(*this, I, iter-axis.begin());
}

template<typename GridCellManager, typename... AxesTypes>
template<int I>
const GridContainer<GridCellManager, AxesTypes...> GridContainer<GridCellManager, AxesTypes...>::fixAxisByValue(const axis_type<I>& value) const {
  return const_cast<GridContainer<GridCellManager, AxesTypes...>*>(this)->fixAxisByValue<I>(value);
}

} // end of namespace GridContainer
} // end of namespace Euclid
