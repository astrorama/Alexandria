/*
 * Copyright (C) 2012-2021 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/**
 * @file GridContainer/_impl/GridIterator.icpp
 * @date May 14, 2014
 * @author Nikolaos Apostolakos
 */

#include "ElementsKernel/Exception.h"
#include "TemplateLoopCounter.h"
#include <algorithm>

namespace Euclid {
namespace GridContainer {

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::iter(
    const GridContainer<GridCellManager, AxesTypes...>& owner, const cell_manager_iter_type& data_iter)
    : m_owner(owner), m_data_iter{data_iter} {}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator=(
    const iter& other) -> iter& {
  m_data_iter     = other.m_data_iter;
  m_fixed_indices = other.m_fixed_indices;
  return *this;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator++() -> iter& {
  ++m_data_iter;
  if (!m_fixed_indices.empty()) {
    for (auto& fixed_index_pair : m_fixed_indices) {
      size_t axis        = fixed_index_pair.first;
      size_t fixed_index = fixed_index_pair.second;
      forwardToIndex(axis, fixed_index);
    }
    // Because we make big steps there is the possibility we went after the end.
    // In this case we set the iterator to the end.
    auto end_iter = GridCellManagerTraits<GridCellManager>::end(*(m_owner.m_cell_manager));
    if (m_data_iter > end_iter) {
      m_data_iter = end_iter;
    }
  }
  return *this;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator*()
    -> ReferenceType {
  return *m_data_iter;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator*() const ->
    typename std::add_const<ReferenceType>::type {
  return *m_data_iter;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator->()
    -> PointerType {
  return m_data_iter.operator->();
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator->() const ->
    typename std::add_const<PointerType>::type {
  return m_data_iter.operator->();
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
bool GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator==(
    const iter& other) const {
  return m_data_iter == other.m_data_iter;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
bool GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::operator!=(
    const iter& other) const {
  return m_data_iter != other.m_data_iter;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
template <int I>
size_t GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::axisIndex() const {
  size_t index = m_data_iter - GridCellManagerTraits<GridCellManager>::begin(*(m_owner.m_cell_manager));
  return m_owner.m_index_helper.axisIndex(I, index);
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
template <int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::axisValue() const
    -> const axis_type<I>& {
  size_t index = axisIndex<I>();
  return std::get<I>(m_owner.m_axes)[index];
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
template <int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::fixAxisByIndex(
    size_t index) -> iter& {
  auto fixed_index = m_fixed_indices.find(I);
  if (fixed_index != m_fixed_indices.end() && fixed_index->second != index) {
    throw Elements::Exception() << "Axis " << m_owner.getOriginalAxis<I>().name() << " is already fixed";
  }
  if (index >= m_owner.getOriginalAxis<I>().size()) {
    throw Elements::Exception() << "Index (" << index << ") out of axis " << m_owner.getOriginalAxis<I>().name()
                                << " size (" << m_owner.getOriginalAxis<I>().size() << ")";
  }
  m_fixed_indices[I] = index;
  forwardToIndex(I, index);
  return *this;
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
template <int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::fixAxisByValue(
    const axis_type<I>& value) -> iter& {
  auto& axis       = m_owner.getOriginalAxis<I>();
  auto  found_axis = std::find(axis.begin(), axis.end(), value);
  if (found_axis == axis.end()) {
    throw Elements::Exception() << "Failed to fix axis " << m_owner.getOriginalAxis<I>().name()
                                << " (given value not found)";
  }
  size_t index = found_axis - axis.begin();
  return fixAxisByIndex<I>(index);
}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
void GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::forwardToIndex(
    size_t axis, size_t fixed_index) {
  size_t current_size  = m_data_iter - GridCellManagerTraits<GridCellManager>::begin(*(m_owner.m_cell_manager));
  size_t current_index = m_owner.m_index_helper.axisIndex(axis, current_size);
  if (fixed_index != current_index) {
    size_t axis_factor = m_owner.m_index_helper.m_axes_index_factors[axis];
    size_t distance    = (fixed_index > current_index)
                             ? fixed_index - current_index
                             : m_owner.m_index_helper.m_axes_sizes[axis] + fixed_index - current_index;
    m_data_iter += distance * axis_factor;
  }
}

template <typename IterFrom, typename IterTo, int I>
static void fixSameAxes(IterFrom& from, IterTo& to, const TemplateLoopCounter<I>&) {
  to.template fixAxisByValue<I>(from.template axisValue<I>());
  fixSameAxes(from, to, TemplateLoopCounter<I - 1>{});
}

template <typename IterFrom, typename IterTo>
static void fixSameAxes(IterFrom&, IterTo&, const TemplateLoopCounter<-1>&) {}

template <typename GridCellManager, typename... AxesTypes>
template <typename CellType, typename PointerType, typename ReferenceType>
template <typename OtherIter>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType, PointerType, ReferenceType>::fixAllAxes(
    const OtherIter& other) -> iter& {
  fixSameAxes(other, *this, TemplateLoopCounter<sizeof...(AxesTypes) - 1>{});
  return *this;
}

}  // namespace GridContainer
}  // end of namespace Euclid