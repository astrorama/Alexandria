/** 
 * @file GridContainer/_impl/GridIterator.icpp
 * @date May 14, 2014
 * @author Nikolaos Apostolakos
 */

#include <algorithm>
#include "ElementsKernel/Exception.h"

namespace Euclid {
namespace Grid {

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::iter(
                                const GridContainer<GridCellManager, AxesTypes...>& owner,
                                const cell_manager_iter_type& data_iter)
        : m_owner(owner), m_data_iter {data_iter} { }

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::operator=(const iter& other) -> iter& {
  m_data_iter = other.m_data_iter;
  m_fixed_indices = other.m_fixed_indices;
  return *this;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::operator++() -> iter& {
  ++m_data_iter;
  if (!m_fixed_indices.empty()) {
    for (auto& fixed_index_pair : m_fixed_indices) {
      size_t axis = fixed_index_pair.first;
      size_t fixed_index = fixed_index_pair.second;
      forwardToIndex(axis, fixed_index);
    }
    // Because we make big steps there is the possibility we went after the end.
    // In this case we set the iterator to the end.
    auto end_iter = GridCellManagerTraits<GridCellManager>::end(*(m_owner.m_cell_manager));
    if (m_data_iter > end_iter) {
      m_data_iter = end_iter;
    }
  }
  return *this;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::operator*() -> CellType& {
  return *m_data_iter;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
bool GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::operator==(const iter& other) const {
  return m_data_iter == other.m_data_iter;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
bool GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::operator!=(const iter& other) const {
  return m_data_iter != other.m_data_iter;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
template<int I>
size_t GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::axisIndex() const {
  size_t index = m_data_iter - GridCellManagerTraits<GridCellManager>::begin(*(m_owner.m_cell_manager));
  return m_owner.m_index_helper.axisIndex(I, index);
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
template<int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::axisValue() const -> const axis_type<I>& {
  size_t index = axisIndex<I>();
  return std::get<I>(m_owner.m_axes)[index];
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
template<int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::fixAxisByIndex(size_t index) -> iter& {
  if (index >= m_owner.getAxis<I>().size()) {
    throw Elements::Exception() << "Index (" << index << ") out of axis " 
                              << m_owner.getAxis<I>().name() << " size ("
                              << m_owner.getAxis<I>().size() << ")";
  }
  m_fixed_indices[I] = index;
  forwardToIndex(I, index);
  return *this;
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
template<int I>
auto GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::fixAxisByValue(const axis_type<I>& value) -> iter& {
  auto axis = m_owner.getAxis<I>();
  auto iter = std::find(axis.begin(), axis.end(), value);
  if (iter == axis.end()) {
    throw Elements::Exception() << "Failed to fix axis " << m_owner.getAxis<I>().name()
                              << " (given value not found)";
  }
  return fixAxisByIndex<I>(iter - axis.begin());
}

template<typename GridCellManager, typename... AxesTypes>
template<typename CellType>
void GridContainer<GridCellManager, AxesTypes...>::iter<CellType>::forwardToIndex(size_t axis, size_t fixed_index) {
  size_t current_size = m_data_iter - GridCellManagerTraits<GridCellManager>::begin(*(m_owner.m_cell_manager));
  size_t current_index = m_owner.m_index_helper.axisIndex(axis, current_size);
  if (fixed_index != current_index) {
    size_t axis_factor = m_owner.m_index_helper.m_axes_index_factors[axis];
    size_t distance = (fixed_index > current_index)
          ? fixed_index - current_index
          : m_owner.m_index_helper.m_axes_sizes[axis] + fixed_index - current_index;
    m_data_iter += distance * axis_factor;
  }
}

} // end of GridContainer namespace
} // end of namespace Euclid