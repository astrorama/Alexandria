/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#include <type_traits>
#include <vector>
#include <boost/algorithm/string.hpp>

namespace Euclid {
namespace GridContainer {

/**
 * Template class to help on the recursive traversal of the grid
 * @tparam I
 *  Handle the axis stored on the (I-1)th position on the GridContainer::AxesTuple
 */
template<size_t I, typename GridCellManager, typename ...Axes>
struct GridToFitsHelper {

  /**
   * Generate recursively the column description for each *knot* on the grid. The order on the tuples
   * is reversed, so the 0th tuple element is inserted on the last position.
   * @param grid
   *    An instance of a grid
   * @param description
   *    A vector where to emplace the description
   */
  static void addColumnDescriptions(const GridContainer<GridCellManager, Axes...>& grid,
                                    std::vector<Table::ColumnDescription>& description) {
    auto& axis = grid.template getAxis<I - 1>();
    using knot_t = typename std::remove_reference<decltype(axis)>::type::data_type;
    auto name = axis.name();
    boost::replace_all(name, " ", "_");
    description.emplace_back(name, typeid(typename GridAxisToTable<knot_t>::table_cell_t));

    GridToFitsHelper<I - 1, GridCellManager, Axes...>::addColumnDescriptions(grid, description);
  }

  /**
   * Iterate over the elements of the (I-1)th axis, and for each one call recursively unfold on the next axis.
   * @tparam Args
   *    Used to keep track of the types of the knots of the previous axes
   * @param grid
   *    An instance of a grid
   * @param column_info
   *    As populated by getColumnDescriptions
   * @param rows
   *    Grid cells will be inserted on this vector
   * @param axes
   *    Used to keep track of the values of the knots of the previous axis
   */
  template<typename ...Args>
  static void
  unfold(const GridContainer<GridCellManager, Axes...>& grid, const std::shared_ptr<Table::ColumnInfo>& column_info,
         std::vector<Table::Row>& rows, std::pair<size_t, Args>... axes) {
    auto& axis = grid.template getAxis<I - 1>();
    for (size_t i = 0; i < axis.size(); ++i) {
      GridToFitsHelper<I - 1, GridCellManager, Axes...>::unfold(grid, column_info, rows, std::make_pair(i, axis[i]),
                                                              axes...);
    }
  }

  /**
   * Same as before, but without the book-keeping data, since this is the entry point
   */
  static void
  unfold(const GridContainer<GridCellManager, Axes...>& grid, const std::shared_ptr<Table::ColumnInfo>& column_info,
         std::vector<Table::Row>& rows) {
    auto& axis = grid.template getAxis<I - 1>();
    for (size_t i = 0; i < axis.size(); ++i) {
      GridToFitsHelper<I - 1, GridCellManager, Axes...>::unfold(grid, column_info, rows, std::make_pair(i, axis[i]));
    }
  }
};

/**
 * Base class for the recursive traversal of the grid
 */
template<typename GridCellManager, typename ...Axes>
struct GridToFitsHelper<0, GridCellManager, Axes...> {
  /**
   * There are no more axis, so do nothing for the columns
   */
  static void addColumnDescriptions(const GridContainer<GridCellManager, Axes...>&,
                                    std::vector<Table::ColumnDescription>&) {}

  /**
   * Insert into the row vector the cell value plus the axes values that brought us here
   */
  template<typename ...Args>
  static void
  unfold(const GridContainer<GridCellManager, Axes...>& grid, const std::shared_ptr<Table::ColumnInfo>& column_info,
         std::vector<Table::Row>& rows, std::pair<size_t, Args> ...axes) {
    using GridType = GridContainer<GridCellManager, Axes...>;

    std::vector<Table::Row::cell_type> row_content{GridAxisToTable<Args>::serialize(axes.second)...};
    std::reverse(row_content.begin(), row_content.end());

    GridCellToTable<typename GridType::cell_type> cell_traits;
    cell_traits.addCells(grid.at(axes.first...), row_content);

    rows.emplace_back(row_content, column_info);
  }
};

/**
 * Transform a GridContainer into a Table, with an entry for each
 * cell. The content will be unfolded, so the knot values will be repeated.
 */
template<typename GridCellManager, typename ...AxesTypes>
Table::Table gridContainerToTable(const GridContainer<GridCellManager, AxesTypes...>& grid) {
  using GridType = GridContainer<GridCellManager, AxesTypes...>;
  using Helper = GridToFitsHelper<std::tuple_size<typename GridType::AxesTuple>::value, GridCellManager, AxesTypes...>;

  std::vector<Table::ColumnDescription> columns;
  Helper::addColumnDescriptions(grid.getAxesTuple(), columns);

  GridCellToTable<typename GridType::cell_type> cell_trais;
  cell_trais.addColumnDescriptions(*grid.begin(), columns);

  auto column_info = std::make_shared<Table::ColumnInfo>(std::move(columns));

  std::vector<Table::Row> rows;
  rows.reserve(grid.size());

  Helper::unfold(grid, column_info, rows);

  return Table::Table{std::move(rows)};
}

} // end of namespace GridContainer
} // end of namespace Euclid
