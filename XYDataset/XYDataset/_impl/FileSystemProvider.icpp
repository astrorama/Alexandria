/**
 * @file FileSytemProvider.icpp
 *
 * @date Apr 14, 2014
 * @author Nicolas Morisset
 */

#ifdef FILESYSTEMPROVIDER_IMPL

#include <boost/filesystem.hpp>
#include <exception>

namespace fs = boost::filesystem;

namespace XYDataset {

template <typename T>

std::unique_ptr<XYDataset> FileSystemProvider<T>::getDataset(const T & identifier)
{
  std::unique_ptr<XYDataset> xy_ptr {};
  return (std::move(xy_ptr));
}

template <typename T>
std::vector<std::string> FileSystemProvider<T>::listContents(const std::string& group)
{

 std::vector<std::string> string_vector;
 // Add root path
 std::string full_path = m_root_path + group;
 // Convert path to boost filesytem object
 fs::path fspath(full_path);

 if (!fs::exists(fspath)) {
   throw ElementsException() << "Path not found : " << fspath
                             << " Group         : " << group
                             << " root path     : " << m_root_path;
 }

 // Get all files below the group directory
 if (fs::is_directory(fspath)) {
   fs::recursive_directory_iterator it {full_path};
   fs::recursive_directory_iterator endit;
   while(it != endit)
   {
     if (fs::is_regular_file(*it))
     {
       // Store the filename including the full path
       string_vector.push_back(it->path().string());
     }
     ++it;
   }
 }
 else {
   throw ElementsException() << "Group : " << group << " is not a directory!";

 }

 return (string_vector);
}

} /* namespace XYDataset */

#endif /* FILESYSTEMPROVIDER_IMPL */
