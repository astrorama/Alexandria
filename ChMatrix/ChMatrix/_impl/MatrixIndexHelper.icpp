/** 
 * @file ChMatrix/_impl/MatrixIndexHelper.icpp
 * @date July 4, 2014
 * @author Nikolaos Apostolakos
 */

namespace ChMatrix {

template<typename... AxesTypes>
MatrixIndexHelper<AxesTypes...>::MatrixIndexHelper(const std::tuple<AxisInfo<AxesTypes>...>& axes_tuple)
          : m_axes_sizes { 
                MatrixConstructionHelper<AxesTypes...>::createAxesSizesVector(
                        axes_tuple, TemplateLoopCounter<sizeof...(AxesTypes)>{})
          }, m_axes_index_factors {
                MatrixConstructionHelper<AxesTypes...>::createAxisIndexFactorVector(
                     axes_tuple, TemplateLoopCounter<sizeof...(AxesTypes)>{})
          } { }

template<typename... AxesTypes>
size_t MatrixIndexHelper<AxesTypes...>::axisIndex(size_t axis, size_t array_index) const {
  size_t index = array_index % m_axes_index_factors[axis + 1];
  index = index / m_axes_index_factors[axis];
  return index;
}

template<typename... AxesTypes>
size_t MatrixIndexHelper<AxesTypes...>::totalIndex(std::initializer_list<size_t> coords) const {
  size_t total {0};
  auto coords_iter = coords.begin();
  auto factors_iter = m_axes_index_factors.begin();
  while (coords_iter != coords.end()) {
    total += (*coords_iter) * (*factors_iter);
    ++coords_iter;
    ++factors_iter;
  }
  return total;
}

}