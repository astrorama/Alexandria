/** 
 * @file ChMatrix/_impl/MatrixIndexHelper.icpp
 * @date July 4, 2014
 * @author Nikolaos Apostolakos
 */

#include "ElementsKernel/ElementsException.h"

namespace ChMatrix {

template<typename... AxesTypes>
MatrixIndexHelper<AxesTypes...>::MatrixIndexHelper(const std::tuple<AxisInfo<AxesTypes>...>& axes_tuple)
          : m_axes_sizes { 
                MatrixConstructionHelper<AxesTypes...>::createAxesSizesVector(
                        axes_tuple, TemplateLoopCounter<sizeof...(AxesTypes)>{})
          }, m_axes_index_factors {
                MatrixConstructionHelper<AxesTypes...>::createAxisIndexFactorVector(
                     axes_tuple, TemplateLoopCounter<sizeof...(AxesTypes)>{})
          } { }

template<typename... AxesTypes>
size_t MatrixIndexHelper<AxesTypes...>::axisIndex(size_t axis, size_t array_index) const {
  size_t index = array_index % m_axes_index_factors[axis + 1];
  index = index / m_axes_index_factors[axis];
  return index;
}

template <typename Factors, typename Coord>
size_t calculateTotalIndex(const Factors& factors, Coord coord) {
  return coord * factors[factors.size() - 2];
}

template <typename Factors, typename Coord, typename... RestCoords>
size_t calculateTotalIndex(const Factors& factors, Coord coord, RestCoords... rest_coords) {
  return coord * factors[factors.size()-sizeof...(RestCoords)-2] + calculateTotalIndex(factors, rest_coords...);
}

template<typename... AxesTypes>
size_t MatrixIndexHelper<AxesTypes...>::totalIndex(decltype(std::declval<AxisInfo<AxesTypes>>().size())... coords) const {
  return calculateTotalIndex(m_axes_index_factors, coords...);
}

template <typename AxesSizes, typename Coord>
void checkBounds(const AxesSizes& axes_sizes, Coord coord) {
  if (coord >= axes_sizes[axes_sizes.size()-1]) {
    throw ElementsException() << "Coordinate " << coord << " for axis "
                              << (axes_sizes.size()-1) << " (size " 
                              << axes_sizes[axes_sizes.size()-1]
                              << ") is out of bound";
  }
}

template <typename AxesSizes, typename Coord, typename... RestCoords>
void checkBounds(const AxesSizes& axes_sizes, Coord coord, RestCoords... rest_coords) {
  if (coord >= axes_sizes[axes_sizes.size()-sizeof...(RestCoords)-1]) {
    throw ElementsException() << "Coordinate " << coord << " for axis "
                              << (axes_sizes.size()-sizeof...(RestCoords)-1) << " (size " 
                              << axes_sizes[axes_sizes.size()-sizeof...(RestCoords)-1]
                              << ") is out of bound";
  }
  checkBounds(axes_sizes, rest_coords...);
}

template<typename... AxesTypes>
size_t MatrixIndexHelper<AxesTypes...>::totalIndexChecked(decltype(std::declval<AxisInfo<AxesTypes>>().size())... coords) const {
  checkBounds(m_axes_sizes, coords...);
  return calculateTotalIndex(m_axes_index_factors, coords...);
}

}