/** 
 * @file ChMatrix/_impl/DataManagerTraits.icpp
 * @date May 13, 2014
 * @author Nikolaos Apostolakos
 */

namespace ChMatrix {

template<typename DataManager>
std::unique_ptr<DataManager> DataManagerTraits<DataManager>::factory(size_t size) {
  return std::unique_ptr<DataManager> {new DataManager(size)};
}

template<typename DataManager>
size_t DataManagerTraits<DataManager>::size(const DataManager& data_manager) {
  return data_manager.size();
}

template<typename DataManager>
auto DataManagerTraits<DataManager>::begin(DataManager& data_manager) -> iterator {
  return data_manager.begin();
}

template<typename DataManager>
auto DataManagerTraits<DataManager>::end(DataManager& data_manager) -> iterator {
  return data_manager.end();
}

template<typename T>
std::unique_ptr<std::vector<T>> DataManagerTraits<std::vector<T>>::factory(size_t size) {
  return std::unique_ptr<std::vector<T>> {new std::vector<T>(size)};
}

template<typename T>
size_t DataManagerTraits<std::vector<T>>::size(const std::vector<T>& vector) {
  return vector.size();
}

template<typename T>
auto DataManagerTraits<std::vector<T>>::begin(std::vector<T>& vector) -> iterator {
  return vector.begin();
}

template<typename T>
auto DataManagerTraits<std::vector<T>>::end(std::vector<T>& vector) -> iterator {
  return vector.end();
}

} // end of namespace ChMatrix