#ifndef INTERPOLATION_IMPL
#error Please, include "MathUtils/interpolation/interpolation.h"
#endif

#include "AlexandriaKernel/index_sequence.h"
#include "MathUtils/interpolation/GridInterpolation.h"

namespace Euclid {
namespace MathUtils {

template <std::size_t, typename Seq>
struct InterpNAdapter;

/**
 * @description
 *  GridInterpolation expects the data to follow GridContainer memory layout, but
 *  originally interpn is expected to follow a numpy memory layout.
 *  We use template dirty tricks to re-use GridInterpolation, transposing the axis at creation time,
 *  and the arguments at interpolation time
 */
template <std::size_t N, std::size_t... Is>
struct InterpNAdapter<N, _index_sequence<Is...>> : NAryFunction<N> {
  // GCC 4.8 needs this hack
  template <std::size_t>
  struct Doubles {
    using type = double;
  };

  template <std::size_t>
  struct Vectors {
    using type = std::vector<double>;
  };

  InterpNAdapter(const Coordinates<N>& grid, const NdArray::NdArray<double>& values, InterpolationType type,
                 bool extrapolate)
      : m_interpn(std::tuple<std::vector<typename Doubles<Is>::type>...>{grid[N - Is - 1]...}, values, extrapolate) {
    if (type != InterpolationType::LINEAR) {
      throw InterpolationException() << "Only linear interpolation is supported for N-dimensional grids";
    }
  }

  double operator()(typename Doubles<Is>::type... xn) const override {
    auto as_tuple = std::make_tuple(xn...);
    return m_interpn(std::get<N - Is - 1>(as_tuple)...);
  }

  void operator()(const typename Vectors<Is>::type&..., std::vector<double>&) const override {
    throw Elements::Exception() << "Not implemented";
  }

  std::unique_ptr<NAryFunction<N>> clone() const override {
    return Euclid::make_unique<InterpNAdapter>(*this);
  }

  InterpNAdapter(const InterpNAdapter&) = default;

private:
  InterpN<typename Doubles<Is>::type...> m_interpn;
};

template <std::size_t N>
std::unique_ptr<NAryFunction<N>> interpn(const Coordinates<N>& grid, const NdArray::NdArray<double>& values,
                                         InterpolationType type, bool extrapolate) {
  return Euclid::make_unique<InterpNAdapter<N, _make_index_sequence<N>>>(grid, values, type, extrapolate);
}

}  // namespace MathUtils
}  // namespace Euclid
