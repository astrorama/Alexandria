#ifdef NDSAMPLER_IMPL

#include "ElementsKernel/Real.h"
#include "MathUtils/function/function_tools.h"
#include "MathUtils/helpers/InverseCumulative.h"
#include "MathUtils/interpolation/interpolation.h"
#include "NdArray/Operations.h"
#include <cmath>
#include <random>

namespace Euclid {
namespace MathUtils {

/**
 * Specialization for a 1D distribution
 * Having the knots values and their probabilities, we compute the un-normalized cumulative distribution,
 * pick a value at uniform between the minimum and maximum cumulative values, and return as a sample the
 * corresponding value on the X axis (linearly interpolated)
 */
template <typename TKnot>
class NdSampler<TKnot> {
public:
  virtual ~NdSampler() = default;

  NdSampler(std::vector<TKnot> knots, const NdArray::NdArray<double>& grid)
      : m_inv_cumulative(std::move(knots), std::vector<double>(grid.begin(), grid.end())) {
    if (grid.shape().size() != 1) {
      throw Elements::Exception() << "Grid with " << grid.shape().size() << " axes passed to a 1D sampler";
    }
  }

  NdSampler(std::tuple<std::vector<TKnot>>&& knots, NdArray::NdArray<double>&& grid)
      : NdSampler(std::move(std::get<0>(knots)), grid) {}

  template <typename Generator, typename... OKnots>
  void draw(std::size_t ndraws, Generator& rng, std::vector<std::tuple<OKnots...>>& output) const {
    constexpr std::size_t this_n = sizeof...(OKnots) - 1;
    static_assert(sizeof...(OKnots) >= 1, "The output tuple must have at least one element");

    if (output.size() != ndraws) {
      throw Elements::Exception() << "Output area does not match the required shape: expected at least " << ndraws << ", got "
                                  << output.size();
    }
    // The std::nextafter is required so the interval is closed
    std::uniform_real_distribution<> uniform(0, std::nextafter(1, std::numeric_limits<double>::max()));
    // Draw samples

    for (auto& row : output) {
      auto p                = uniform(rng);
      std::get<this_n>(row) = m_inv_cumulative(p);
    }
  }

  template <typename Generator>
  std::vector<std::tuple<TKnot>> draw(std::size_t ndraws, Generator& rng) const {
    std::vector<std::tuple<TKnot>> samples(ndraws);
    draw(ndraws, rng, samples);
    return samples;
  }

private:
  const InverseCumulative<TKnot> m_inv_cumulative;
};

/**
 * Helper class to call the interpolation function
 */
template <std::size_t Start, typename Seq>
struct _CallHelper {};

/**
 * Unwrap the access to the parameters
 */
template <std::size_t Start, std::size_t... Is>
struct _CallHelper<Start, _index_sequence<Is...>> {

  /**
   * @tparam Func
   *    Type of the interpolated function
   * @param func
   *    Interpolated function
   * @param x0
   *    Value for the 0th dimension
   * @param xs
   *    Rest (fixed) values for the 1,...,N-1 dimensions
   */
  template <typename Func, typename TKnot0, typename... TKnotN>
  static double call(Func& func, const TKnot0 x0, const std::tuple<TKnotN...>& xs) {
    return func(x0, std::get<Start + 1 + Is>(xs)...);
  }
};

/**
 * General case
 */
template <typename TKnot0, typename... TKnotN>
class NdSampler<TKnot0, TKnotN...> {
public:
  /**
   * Constructor
   * @param knots
   * @param values
   */
  NdSampler(std::tuple<std::vector<TKnot0>, std::vector<TKnotN>...> knots, const NdArray::NdArray<double>& values) {
    constexpr std::size_t N = sizeof...(TKnotN) + 1;

    if (values.shape().size() != N) {
      throw Elements::Exception() << "Grid with " << values.shape().size() << " axes passed to a " << N << "D sampler";
    }

    // Interpolate this dimension
    m_interpolation = Euclid::make_unique<InterpN<TKnot0, TKnotN...>>(knots, values, false);

    // This axis knots
    m_knots0 = std::move(std::get<0>(knots));

    // Compute the marginal of the first nested dimension
    // i.e. for N=2, compute the marginal of N=1
    auto marginal = sum(values, 0);

    // Nested sampler
    auto rest_knots = Tuple::Tail(std::move(knots));
    m_subsampler    = Euclid::make_unique<NdSampler<TKnotN...>>(std::move(rest_knots), std::move(marginal));
  }

  /**
   * Get a sample
   * @tparam Generator
   * @param ndraws
   * @param rng
   * @return
   */
  template <typename Generator>
  std::vector<std::tuple<TKnot0, TKnotN...>> draw(std::size_t ndraws, Generator& rng) const {
    std::vector<std::tuple<TKnot0, TKnotN...>> output(ndraws);
    draw(ndraws, rng, output);
    return output;
  }

  /**
   * Get a sample into an user-provided output area
   * @tparam Generator
   * @param ndraws
   * @param rng
   * @param output
   */
  template <typename Generator, typename... OutputKnots>
  void draw(std::size_t ndraws, Generator& rng, std::vector<std::tuple<OutputKnots...>>& output) const {
    constexpr std::size_t this_n = sizeof...(OutputKnots) - sizeof...(TKnotN) - 1;

    if (output.size() != ndraws) {
      throw Elements::Exception() << "Output area does not match the required shape: expected at least " << ndraws << ", got "
                                  << output.size();
    }

    // The std::nextafter is required so the interval is closed and there is a chance of getting 1.
    std::uniform_real_distribution<> uniform(0, std::nextafter(1, std::numeric_limits<double>::max()));

    // Sample from x1..x_{N-1}
    m_subsampler->draw(ndraws, rng, output);

    // For each sample
    for (std::size_t draw_i = 0; draw_i < ndraws; ++draw_i) {
      std::vector<double> pdf(m_knots0.size());
      auto&               subsample = output[draw_i];
      // Evaluate the PDF
      for (std::size_t i = 0; i < m_knots0.size(); ++i) {
        pdf[i] = _CallHelper<this_n, _make_index_sequence<sizeof...(TKnotN)>>::call(*m_interpolation, m_knots0[i], subsample);
      }

      auto                      p = uniform(rng);
      InverseCumulative<TKnot0> inv_cumulative(m_knots0, std::move(pdf));
      std::get<this_n>(subsample) = inv_cumulative(p);
    }
  }

private:
  std::unique_ptr<InterpN<TKnot0, TKnotN...>> m_interpolation;
  std::vector<TKnot0>                         m_knots0;
  std::unique_ptr<NdSampler<TKnotN...>>       m_subsampler;
};

}  // namespace MathUtils
}  // namespace Euclid

#endif
