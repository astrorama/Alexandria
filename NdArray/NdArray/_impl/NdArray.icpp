/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifdef NDARRAY_IMPL

#include <algorithm>

namespace Euclid {
namespace NdArray {

template<typename T>
template<bool Const>
NdArray<T>::Iterator<Const>::Iterator(ContainerInterface *container_ptr, size_t offset)
  : m_container_ptr{container_ptr}, m_offset{offset} {}


template<typename T>
template<bool Const>
NdArray<T>::Iterator<Const>::Iterator(const Iterator<false>& other)
  : m_container_ptr{other.m_container_ptr},
    m_offset{other.m_offset} {
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator++() -> Iterator& {
  ++m_offset;
  return *this;
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator++(int) -> Iterator {
  return Iterator{m_container_ptr, m_offset + 1};
}

template<typename T>
template<bool Const>
bool NdArray<T>::Iterator<Const>::operator==(const Iterator& other) const {
  return m_container_ptr == other.m_container_ptr && m_offset == other.m_offset;
}

template<typename T>
template<bool Const>
bool NdArray<T>::Iterator<Const>::operator!=(const Iterator& other) const {
  return m_container_ptr != other.m_container_ptr || m_offset != other.m_offset;
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator*() -> value_t& {
  return m_container_ptr->at(m_offset);
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator*() const -> value_t {
  return m_container_ptr->at(m_offset);
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator+=(size_t n) -> Iterator& {
  m_offset += n;
  return *this;
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator+(size_t n) -> Iterator {
  return Iterator{m_container_ptr, m_offset + n};
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator-=(size_t n) -> Iterator& {
  assert (n <= m_offset);
  m_offset -= n;
  return *this;
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator-(size_t n) -> Iterator {
  assert (n <= m_offset);
  return Iterator{m_container_ptr, m_offset - n};
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator-(const Iterator& other) -> difference_type {
  assert(m_container_ptr == other.m_container_ptr);
  return m_offset - other.m_offset;
}

template<typename T>
template<bool Const>
auto NdArray<T>::Iterator<Const>::operator[](size_t i) -> value_t& {
  return m_container_ptr->at(m_offset + i);
}

template<typename T>
template<bool Const>
bool NdArray<T>::Iterator<Const>::operator<(const Iterator& other) {
  assert(m_container_ptr == other.m_container_ptr);
  return m_offset < other.m_offset;
}

template<typename T>
template<bool Const>
bool NdArray<T>::Iterator<Const>::operator>(const Iterator& other) {
  assert(m_container_ptr == other.m_container_ptr);
  return m_offset > other.m_offset;
}

template<typename T>
NdArray<T>::NdArray(const std::vector<size_t>& shape)
  : m_shape{shape}, m_size{std::accumulate(m_shape.begin(), m_shape.end(), 1u, std::multiplies<size_t>())},
    m_container(new ContainerWrapper<std::vector>(m_size)) {
  update_strides();
}

template<typename T>
template<template<class...> class Container>
NdArray<T>::NdArray(const std::vector<size_t>& shape, const Container<T>& data)
  : m_shape{shape}, m_size{std::accumulate(m_shape.begin(), m_shape.end(), 1u, std::multiplies<size_t>())},
    m_container{new ContainerWrapper<Container>(data)} {
  if (m_size != m_container->size()) {
    throw std::invalid_argument("Data size does not match the shape");
  }
  update_strides();
}

template<typename T>
template<template<class...> class Container>
NdArray<T>::NdArray(const std::vector<size_t>& shape, Container<T>&& data)
  : m_shape{shape}, m_size{std::accumulate(m_shape.begin(), m_shape.end(), 1u, std::multiplies<size_t>())},
    m_container{new ContainerWrapper<Container>(std::move(data))} {
  if (m_size != m_container->size()) {
    throw std::invalid_argument("Data size does not match the shape");
  }
  update_strides();
}

template<typename T>
template<typename II>
NdArray<T>::NdArray(const std::vector<size_t>& shape, II begin, II end)
  : m_shape{shape},
    m_size{std::accumulate(m_shape.begin(), m_shape.end(), 1u, std::multiplies<size_t>())},
    m_container{new ContainerWrapper<std::vector>(begin, end)} {
  if (m_size != m_container->size()) {
    throw std::invalid_argument("Data size does not match the shape");
  }
  update_strides();
}

template<typename T>
NdArray<T>::NdArray(const self_type* other)
  : m_shape{other->m_shape}, m_attr_names{other->m_attr_names},
    m_size{std::accumulate(m_shape.begin(), m_shape.end(), 1u, std::multiplies<size_t>())},
    m_container{other->m_container->copy()} {
  update_strides();
}

inline std::vector<size_t> appendAttrShape(std::vector<size_t> shape, size_t append) {
  if (append)
    shape.push_back(append);
  return shape;
}

template<typename T>
template<typename ...Args>
NdArray<T>::NdArray(const std::vector<size_t>& shape, const std::vector<std::string>& attr_names, Args&& ... args)
  : NdArray{appendAttrShape(shape, attr_names.size()), std::forward<Args>(args)...} {
  m_attr_names = attr_names;
}

template<typename T>
auto NdArray<T>::reshape(const std::vector<size_t> new_shape) -> self_type& {
  if (!m_attr_names.empty())
    throw std::invalid_argument("Can not reshape arrays with attribute names");

  size_t new_size = std::accumulate(new_shape.begin(), new_shape.end(), 1, std::multiplies<size_t>());
  if (new_size != m_size) {
    throw std::range_error("New shape does not match the number of contained elements");
  }
  m_shape = new_shape;
  update_strides();
  return *this;
}

template<typename T>
template<typename ...D>
auto NdArray<T>::reshape(size_t i, D... rest) -> self_type& {
  std::vector<size_t> acc{i};
  return reshape_helper(acc, rest...);
}

template<typename T>
T& NdArray<T>::at(const std::vector<size_t>& coords) {
  auto offset = get_offset(coords);
  return m_container->at(offset);
}

template<typename T>
const T& NdArray<T>::at(const std::vector<size_t>& coords) const {
  auto offset = get_offset(coords);
  return m_container->at(offset);
}

template<typename T>
T& NdArray<T>::at(const std::vector<size_t>& coords, const std::string& attr) {
  auto offset = get_offset(coords, attr);
  return m_container->at(offset);
}

template<typename T>
const T& NdArray<T>::at(const std::vector<size_t>& coords, const std::string& attr) const {
  auto offset = get_offset(coords, attr);
  return m_container->at(offset);
}

template<typename T>
template<typename ...D>
T& NdArray<T>::at(size_t i, D... rest) {
  std::vector<size_t> acc{i};
  return at_helper(acc, rest...);
}

template<typename T>
template<typename ...D>
const T& NdArray<T>::at(size_t i, D... rest) const {
  std::vector<size_t> acc{i};
  return at_helper(acc, rest...);
}

template<typename T>
auto NdArray<T>::begin() -> iterator {
  return iterator{m_container.get(), 0};
}

template<typename T>
auto NdArray<T>::end() -> iterator {
  return iterator{m_container.get(), m_size};
}

template<typename T>
auto NdArray<T>::begin() const -> const_iterator {
  return const_iterator{m_container.get(), 0};
}

template<typename T>
auto NdArray<T>::end() const -> const_iterator {
  return const_iterator{m_container.get(), m_size};
}

template<typename T>
size_t NdArray<T>::size() const {
  return m_size;
}

template<typename T>
bool NdArray<T>::operator==(const self_type& b) const {
  if (shape() != b.shape())
    return false;
  for (auto ai = begin(), bi = b.begin(); ai != end() && bi != b.end(); ++ai, ++bi) {
    if (*ai != *bi)
      return false;
  }
  return true;
}

template<typename T>
bool NdArray<T>::operator!=(const self_type& b) const {
  return !(*this == b);
}

template<typename T>
const std::vector<std::string>& NdArray<T>::attributes() const {
  return m_attr_names;
}

template<typename T>
auto NdArray<T>::concatenate(const self_type& other) -> self_type& {
  // Verify dimensionality
  if (m_shape.size() != other.m_shape.size()) {
    throw std::length_error("Can not concatenate arrays with different dimensionality");
  }
  for (size_t i = 1; i < m_shape.size(); ++i) {
    if (m_shape[i] != other.m_shape[i])
      throw std::length_error("The size of all axis except for the first one must match");
  }

  // New shape
  auto old_size = m_container->size();
  auto shape = m_shape;
  shape[0] += other.m_shape[0];

  // Resize container
  m_container->resize(shape);

  // Copy to the end
  std::copy(std::begin(other), std::end(other), m_container->m_data_ptr + old_size);
  // Done!
  m_shape = shape;
  return *this;
}

template<typename T>
size_t NdArray<T>::get_offset(const std::vector<size_t>& coords) const {
  if (coords.size() != m_shape.size()) {
    throw std::out_of_range(
      "Invalid number of coordinates, got " + std::to_string(coords.size())
      + ", expected " + std::to_string(m_shape.size())
    );
  }

  size_t offset = 0;
  for (size_t i = 0; i < coords.size(); ++i) {
    if (coords[i] >= m_shape[i]) {
      throw std::out_of_range(
        std::to_string(coords[i]) + " >= " + std::to_string(m_shape[i]) + " for axis " + std::to_string(i)
      );
    }
    offset += coords[i] * m_stride_size[i];
  }

  assert(offset < m_container->size());
  return offset;
}

template<typename T>
size_t NdArray<T>::get_offset(std::vector<size_t> coords, const std::string& attr) const {
  auto i = std::find(m_attr_names.begin(), m_attr_names.end(), attr);
  if (i == m_attr_names.end())
    throw std::out_of_range(attr);
  auto last = i - m_attr_names.begin();
  coords.emplace_back(last);
  return get_offset(coords);
}

template<typename T>
void NdArray<T>::update_strides() {
  m_stride_size.resize(m_shape.size());

  size_t acc = 1;
  for (size_t i = m_stride_size.size(); i > 0; --i) {
    m_stride_size[i - 1] = acc;
    acc *= m_shape[i - 1];
  }
}

/**
 * Helper to expand at with a variable number of arguments
 */
template<typename T>
template<typename ...D>
T& NdArray<T>::at_helper(std::vector<size_t>& acc, size_t i, D... rest) {
  acc.push_back(i);
  return at_helper(acc, rest...);
}

template<typename T>
T& NdArray<T>::at_helper(std::vector<size_t>& acc) {
  return at(acc);
}

template<typename T>
T& NdArray<T>::at_helper(std::vector<size_t>& acc, const std::string& attr) {
  return at(acc, attr);
}

template<typename T>
template<typename ...D>
const T& NdArray<T>::at_helper(std::vector<size_t>& acc, size_t i, D... rest) const {
  acc.push_back(i);
  return at_helper(acc, rest...);
}

template<typename T>
const T& NdArray<T>::at_helper(std::vector<size_t>& acc) const {
  return at(acc);
}

template<typename T>
template<typename ...D>
auto NdArray<T>::reshape_helper(std::vector<size_t>& acc, size_t i, D... rest) -> self_type& {
  acc.push_back(i);
  return reshape_helper(acc, rest...);
}

template<typename T>
auto NdArray<T>::reshape_helper(std::vector<size_t>& acc) -> self_type& {
  return reshape(acc);
}

template<typename T>
std::ostream& operator<<(std::ostream& out, const NdArray <T>& ndarray) {
  auto shape = ndarray.shape();

  if (ndarray.size()) {
    out << "<";
    size_t i;
    for (i = 0; i < shape.size() - 1; ++i) {
      out << shape[i] << ",";
    }
    out << shape[i] << ">";

    auto iter = ndarray.begin(), end_iter = ndarray.end() - 1;
    for (; iter != end_iter; ++iter) {
      out << *iter << ",";
    }
    out << *iter;
  }
  return out;
}

} // end of namespace NdArray
} // end of namespace Euclid

#endif // NDARRAY_IMPL
