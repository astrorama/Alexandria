/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifdef NPY_IMPL

#include "NdArray/NdArray.h"
#include "NpyCommon.h"
#include <ElementsKernel/Exception.h>
#include <cstring>
#include <istream>

namespace Euclid {
namespace NdArray {

using boost::endian::little_uint16_t;
using boost::endian::little_uint32_t;

template <typename T>
NdArray<T> readNpy(std::istream& input) {
  std::string              dtype;
  size_t                   n_elements;
  std::vector<size_t>      shape;
  std::vector<std::string> attr_names;

  readNpyHeader(input, dtype, shape, attr_names, n_elements);
  if (dtype != NpyDtype<T>::str)
    throw Elements::Exception() << "Can not cast " << dtype << " into " << typeid(T).name();

  if (!attr_names.empty()) {
    n_elements *= attr_names.size();
  }

  std::vector<T> data(n_elements);
  input.read(reinterpret_cast<char*>(&data[0]), sizeof(T) * data.size());
  return {shape, attr_names, std::move(data)};
}

}  // end of namespace NdArray
}  // end of namespace Euclid

#endif  // NPY_IMPL
