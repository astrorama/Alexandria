/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#ifdef NPY_IMPL

#include <endian.h>
#include <sstream>
#include <boost/endian/arithmetic.hpp>
#include <ElementsKernel/Exception.h>
#include "NdArray/NdArray.h"
#include "NpyCommon.h"

namespace Euclid {
namespace NdArray {

/*
 * Implementation of writeNpy
 */
template<typename T>
void writeNpy(std::ostream& out, const NdArray<T>& array) {
  writeNpyHeader<T>(out, array.shape(), array.attributes());
  // The header already has the endian type, so just dump the content of the array
  for (auto v : array) {
    out.write(reinterpret_cast<const char *>(&v), sizeof(v));
  }
}

} // end of namespace NdArray
} // end of namespace Euclid

#endif // NPY_IMPL
