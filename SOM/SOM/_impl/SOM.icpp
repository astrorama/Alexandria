/*
 * Copyright (C) 2012-2022 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * @file SOM.icpp
 * @author nikoapos
 */

#include "SOM/ImplTools.h"

namespace Euclid {
namespace SOM {

template <typename DistFunc>
SOM<DistFunc>::SOM(std::size_t dimensions, std::size_t x, std::size_t y, InitFunc::Signature init_func)
    : m_dimensions(dimensions)
    , m_cells(std::make_tuple(ImplTools::indexAxis("X", x), ImplTools::indexAxis("Y", y)), m_dimensions)
    , m_size(x, y) {

  // Initialize all the grid cells using the given function
  for (auto array : m_cells) {
    for (auto& w : array) {
      w = init_func();
    }
  }

}  // end of namespace SOM_impl

template <typename DistFunc>
const std::pair<std::size_t, std::size_t>& SOM<DistFunc>::getSize() const {
  return m_size;
}

template <typename DistFunc>
std::size_t SOM<DistFunc>::getDimensions() const {
  return m_dimensions;
}

template <typename DistFunc>
auto SOM<DistFunc>::operator()(std::size_t x, std::size_t y) -> reference_type {
  return m_cells(x, y);
}

template <typename DistFunc>
auto SOM<DistFunc>::operator()(std::size_t x, std::size_t y) const -> const reference_type {
  return m_cells(x, y);
}

template <typename DistFunc>
typename SOM<DistFunc>::iterator SOM<DistFunc>::begin() {
  return m_cells.begin();
}

template <typename DistFunc>
typename SOM<DistFunc>::iterator SOM<DistFunc>::end() {
  return m_cells.end();
}

template <typename DistFunc>
typename SOM<DistFunc>::const_iterator SOM<DistFunc>::begin() const {
  return m_cells.begin();
}

template <typename DistFunc>
typename SOM<DistFunc>::const_iterator SOM<DistFunc>::end() const {
  return m_cells.end();
}

template <typename DistFunc>
typename SOM<DistFunc>::const_iterator SOM<DistFunc>::cbegin() {
  return m_cells.cbegin();
}

template <typename DistFunc>
typename SOM<DistFunc>::const_iterator SOM<DistFunc>::cend() {
  return m_cells.cend();
}

namespace SOM_impl {

template <typename DistFunc>
std::tuple<std::size_t, std::size_t, double>
findBMU_impl(const SOM<DistFunc>&                                                  som,
             std::function<double(const GridContainer::VectorValueProxy<double>&)> dist_func) {
  auto   result_iter      = som.begin();
  double closest_distance = std::numeric_limits<double>::max();
  for (auto iter = som.begin(); iter != som.end(); ++iter) {
    double dist = dist_func(*iter);
    if (dist < closest_distance) {
      result_iter      = iter;
      closest_distance = dist;
    }
  }
  return std::make_tuple(result_iter.template axisValue<0>(), result_iter.template axisValue<1>(), closest_distance);
}

}  // end of namespace SOM_impl

template <typename DistFunc>
std::tuple<std::size_t, std::size_t, double> SOM<DistFunc>::findBMU(const std::vector<double>& input) const {
  assert(input.size() == m_dimensions);
  DistFunc dist_func{};
  return SOM_impl::findBMU_impl<DistFunc>(
      *this, [&dist_func, &input](const GridContainer::VectorValueProxy<double>& cell) -> double {
        return dist_func.distance(cell.begin(), cell.end(), input.begin());
      });
}

template <typename DistFunc>
std::tuple<std::size_t, std::size_t, double> SOM<DistFunc>::findBMU(const std::vector<double>& input,
                                                                    const std::vector<double>& uncertainties) const {
  assert(input.size() == uncertainties.size() && input.size() == m_dimensions);
  DistFunc dist_func{};
  return SOM_impl::findBMU_impl<DistFunc>(
      *this, [&dist_func, &input, &uncertainties](const GridContainer::VectorValueProxy<double>& cell) -> double {
        return dist_func.distance(cell.begin(), cell.end(), input.begin(), uncertainties.begin());
      });
}

template <typename DistFunc>
template <typename InputType, typename WeightFunc>
std::tuple<std::size_t, std::size_t, double> SOM<DistFunc>::findBMU(const InputType& input,
                                                                    WeightFunc       weight_func) const {

  static_assert(std::is_same<decltype(std::declval<WeightFunc>()(input)), std::vector<double>>::value,
                "WeightFunc must be callable with input as parameter, returning an std::vector<double>");

  return findBMU(weight_func(input));
}

template <typename DistFunc>
template <typename InputType, typename WeightFunc, typename UncertaintyFunc>
std::tuple<std::size_t, std::size_t, double> SOM<DistFunc>::findBMU(const InputType& input, WeightFunc weight_func,
                                                                    UncertaintyFunc uncertainty_func) const {

  static_assert(std::is_same<decltype(std::declval<WeightFunc>()(input)), std::vector<double>>::value,
                "WeightFunc must be callable with input as parameter, returning an std::vector<double>");
  static_assert(std::is_same<decltype(std::declval<UncertaintyFunc>()(input)), std::vector<double>>::value,
                "UncertaintyFunc must be callable with input as parameter, returning an std::vector<double>");

  return findBMU(weight_func(input), uncertainty_func(input));
}

}  // namespace SOM
}  // namespace Euclid
