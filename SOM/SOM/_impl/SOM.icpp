/*
 * Copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * @file SOM.icpp
 * @author nikoapos
 */

#include "SOM/ImplTools.h"

namespace Euclid {
namespace SOM {

template <std::size_t ND, typename DistFunc>
SOM<ND, DistFunc>::SOM(std::size_t x, std::size_t y, InitFunc::Signature init_func)
    : m_cells(ImplTools::indexAxis("X", x), ImplTools::indexAxis("Y", y)), m_size(x, y) {

  // Initialize all the grid cells using the given function
  for (auto& array : m_cells) {
    for (auto& w : array) {
      w = init_func();
    }
  }

}  // end of namespace SOM_impl

template <std::size_t ND, typename DistFunc>
const std::pair<std::size_t, std::size_t>& SOM<ND, DistFunc>::getSize() const {
  return m_size;
}

template <std::size_t ND, typename DistFunc>
typename std::array<double, ND>& SOM<ND, DistFunc>::operator()(std::size_t x, std::size_t y) {
  return m_cells(x, y);
}

template <std::size_t ND, typename DistFunc>
const typename std::array<double, ND>& SOM<ND, DistFunc>::operator()(std::size_t x, std::size_t y) const {
  return m_cells(x, y);
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::iterator SOM<ND, DistFunc>::begin() {
  return m_cells.begin();
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::iterator SOM<ND, DistFunc>::end() {
  return m_cells.end();
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::const_iterator SOM<ND, DistFunc>::begin() const {
  return m_cells.begin();
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::const_iterator SOM<ND, DistFunc>::end() const {
  return m_cells.end();
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::const_iterator SOM<ND, DistFunc>::cbegin() {
  return m_cells.cbegin();
}

template <std::size_t ND, typename DistFunc>
typename SOM<ND, DistFunc>::const_iterator SOM<ND, DistFunc>::cend() {
  return m_cells.cend();
}

namespace SOM_impl {

template <std::size_t ND, typename DistFunc>
std::tuple<std::size_t, std::size_t, double> findBMU_impl(const SOM<ND, DistFunc>&                             som,
                                                          std::function<double(const std::array<double, ND>&)> dist_func) {
  auto   result_iter      = som.begin();
  double closest_distance = std::numeric_limits<double>::max();
  for (auto iter = som.begin(); iter != som.end(); ++iter) {
    double dist = dist_func(*iter);
    if (dist < closest_distance) {
      result_iter      = iter;
      closest_distance = dist;
    }
  }
  return std::make_tuple(result_iter.template axisValue<0>(), result_iter.template axisValue<1>(), closest_distance);
}

}  // end of namespace SOM_impl

template <std::size_t ND, typename DistFunc>
std::tuple<std::size_t, std::size_t, double> SOM<ND, DistFunc>::findBMU(const std::array<double, ND>& input) const {
  DistFunc dist_func{};
  return SOM_impl::findBMU_impl<ND, DistFunc>(
      *this, [&dist_func, &input](const std::array<double, ND>& cell) -> double { return dist_func.distance(cell, input); });
}

template <std::size_t ND, typename DistFunc>
std::tuple<std::size_t, std::size_t, double> SOM<ND, DistFunc>::findBMU(const std::array<double, ND>& input,
                                                                        const std::array<double, ND>& uncertainties) const {
  DistFunc dist_func{};
  return SOM_impl::findBMU_impl<ND, DistFunc>(*this,
                                              [&dist_func, &input, &uncertainties](const std::array<double, ND>& cell) -> double {
                                                return dist_func.distance(cell, input, uncertainties);
                                              });
}

template <std::size_t ND, typename DistFunc>
template <typename InputType, typename WeightFunc>
std::tuple<std::size_t, std::size_t, double> SOM<ND, DistFunc>::findBMU(const InputType& input, WeightFunc weight_func) const {

  static_assert(std::is_same<decltype(std::declval<WeightFunc>()(input)), std::array<double, ND>>::value,
                "WeightFunc must be callable with input as parameter, returning an std::array<double, ND>");

  return findBMU(weight_func(input));
}

template <std::size_t ND, typename DistFunc>
template <typename InputType, typename WeightFunc, typename UncertaintyFunc>
std::tuple<std::size_t, std::size_t, double> SOM<ND, DistFunc>::findBMU(const InputType& input, WeightFunc weight_func,
                                                                        UncertaintyFunc uncertainty_func) const {

  static_assert(std::is_same<decltype(std::declval<WeightFunc>()(input)), std::array<double, ND>>::value,
                "WeightFunc must be callable with input as parameter, returning an std::array<double, ND>");
  static_assert(std::is_same<decltype(std::declval<UncertaintyFunc>()(input)), std::array<double, ND>>::value,
                "UncertaintyFunc must be callable with input as parameter, returning an std::array<double, ND>");

  return findBMU(weight_func(input), uncertainty_func(input));
}

}  // namespace SOM
}  // namespace Euclid
